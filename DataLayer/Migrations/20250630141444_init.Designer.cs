// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(DVdDbContext))]
    [Migration("20250630141444_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Retntal")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActorFilm", b =>
                {
                    b.Property<int>("ActorsActor_id")
                        .HasColumnType("integer");

                    b.Property<int>("FilmsFilm_id")
                        .HasColumnType("integer");

                    b.HasKey("ActorsActor_id", "FilmsFilm_id");

                    b.HasIndex("FilmsFilm_id");

                    b.ToTable("ActorFilm", "Retntal");
                });

            modelBuilder.Entity("CategoryFilm", b =>
                {
                    b.Property<int>("CategoriesCategory_id")
                        .HasColumnType("integer");

                    b.Property<int>("FilmsFilm_id")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesCategory_id", "FilmsFilm_id");

                    b.HasIndex("FilmsFilm_id");

                    b.ToTable("CategoryFilm", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Actor", b =>
                {
                    b.Property<int>("Actor_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Actor_id"));

                    b.Property<string>("First_name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Last_update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Actor_id");

                    b.ToTable("actors", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Address", b =>
                {
                    b.Property<int>("Address_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Address_id"));

                    b.Property<string>("Address_1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Address_2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("City_id")
                        .HasColumnType("integer");

                    b.Property<int>("City_id1")
                        .HasColumnType("integer");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("Last_update")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Postal_code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Address_id");

                    b.HasIndex("City_id1");

                    b.ToTable("addresses", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Category", b =>
                {
                    b.Property<int>("Category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Category_id"));

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.HasKey("Category_id");

                    b.ToTable("Categories_List", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.City", b =>
                {
                    b.Property<int>("City_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("City_id"));

                    b.Property<string>("City_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Country_id")
                        .HasColumnType("integer");

                    b.Property<int>("Country_id1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Last_update")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("City_id");

                    b.HasIndex("Country_id1");

                    b.ToTable("city", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Country", b =>
                {
                    b.Property<int>("Country_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Country_id"));

                    b.Property<string>("Country_Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("Last_update")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Country_id");

                    b.ToTable("Countries", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Customer", b =>
                {
                    b.Property<int>("Customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Customer_id"));

                    b.Property<bool>("Activebool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("Address_id")
                        .HasColumnType("integer");

                    b.Property<int>("Address_id1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Create_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("First_name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("Last_update")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Store_id")
                        .HasColumnType("integer");

                    b.Property<int>("Store_id1")
                        .HasColumnType("integer");

                    b.HasKey("Customer_id");

                    b.HasIndex("Address_id1");

                    b.HasIndex("Store_id1");

                    b.ToTable("customer", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Film", b =>
                {
                    b.Property<int>("Film_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Film_id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("FullText")
                        .IsRequired()
                        .HasMaxLength(6000)
                        .HasColumnType("character varying(6000)");

                    b.Property<int>("Language_id")
                        .HasColumnType("integer");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("Release_year")
                        .HasColumnType("integer")
                        .HasColumnName("int");

                    b.Property<int>("Rental_Rate")
                        .HasColumnType("integer");

                    b.Property<int>("Rental_duration")
                        .HasColumnType("int");

                    b.Property<double>("Replacement_Cost")
                        .HasColumnType("double precision");

                    b.Property<string>("Special_features")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)");

                    b.HasKey("Film_id");

                    b.HasIndex("Language_id");

                    b.ToTable("FilmList", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Film_actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Actor_id")
                        .HasColumnType("integer");

                    b.Property<int?>("Actor_id1")
                        .HasColumnType("integer");

                    b.Property<int>("Film_id")
                        .HasColumnType("integer");

                    b.Property<int?>("Film_id1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Last_update")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Actor_id1");

                    b.HasIndex("Film_id1");

                    b.ToTable("Film_Actors", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Film_category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category_id")
                        .HasColumnType("integer");

                    b.Property<int>("Category_id1")
                        .HasColumnType("integer");

                    b.Property<int>("Film_id")
                        .HasColumnType("integer");

                    b.Property<int>("Film_id1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Category_id1");

                    b.HasIndex("Film_id1");

                    b.ToTable("Film_Categories", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Inventory", b =>
                {
                    b.Property<int>("Inventory_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Inventory_id"));

                    b.Property<int>("Film_id")
                        .HasColumnType("integer");

                    b.Property<int>("Film_id1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Last_update")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Store_id")
                        .HasColumnType("integer");

                    b.Property<int>("Store_id1")
                        .HasColumnType("integer");

                    b.HasKey("Inventory_id");

                    b.HasIndex("Film_id1");

                    b.HasIndex("Store_id1");

                    b.ToTable("Inventories", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Language", b =>
                {
                    b.Property<int>("Language_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Language_id"));

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("character varying(65)");

                    b.HasKey("Language_id");

                    b.ToTable("Languages", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Payment", b =>
                {
                    b.Property<int>("Payment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Payment_id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("Customer_id")
                        .HasColumnType("integer");

                    b.Property<int>("Customer_id1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Payment_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Rental_id")
                        .HasColumnType("integer");

                    b.Property<int>("Rental_id1")
                        .HasColumnType("integer");

                    b.Property<int>("Staff_id")
                        .HasColumnType("integer");

                    b.Property<int>("Staff_id1")
                        .HasColumnType("integer");

                    b.HasKey("Payment_id");

                    b.HasIndex("Customer_id1");

                    b.HasIndex("Rental_id1");

                    b.HasIndex("Staff_id1");

                    b.ToTable("Payments", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Rental", b =>
                {
                    b.Property<int>("Rental_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Rental_id"));

                    b.Property<int>("Customer_id")
                        .HasColumnType("integer");

                    b.Property<int>("Customer_id1")
                        .HasColumnType("integer");

                    b.Property<int>("Inventory_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Last_update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Rental_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("Return_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Staff_id")
                        .HasColumnType("integer");

                    b.Property<int>("Staff_id1")
                        .HasColumnType("integer");

                    b.Property<int>("inventory_id")
                        .HasColumnType("integer");

                    b.HasKey("Rental_id");

                    b.HasIndex("Customer_id1");

                    b.HasIndex("Inventory_id");

                    b.HasIndex("Staff_id1");

                    b.ToTable("Rentals", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Staff", b =>
                {
                    b.Property<int>("Staff_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Staff_id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Address_id1")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("First_name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime>("Last_update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<int>("StoreManagedStore_id")
                        .HasColumnType("integer");

                    b.Property<int>("Store_id")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Staff_id");

                    b.HasIndex("Address_id1");

                    b.HasIndex("StoreManagedStore_id");

                    b.ToTable("Staffs", "Retntal");
                });

            modelBuilder.Entity("DomainLayer.Store", b =>
                {
                    b.Property<int>("Store_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Store_id"));

                    b.Property<string>("Address_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Customer_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Last_update")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Manager_staff_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("inventory_id")
                        .HasColumnType("integer");

                    b.HasKey("Store_id");

                    b.ToTable("Stores", "Retntal");
                });

            modelBuilder.Entity("ActorFilm", b =>
                {
                    b.HasOne("DomainLayer.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsActor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsFilm_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryFilm", b =>
                {
                    b.HasOne("DomainLayer.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsFilm_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLayer.Address", b =>
                {
                    b.HasOne("DomainLayer.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("City_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DomainLayer.City", b =>
                {
                    b.HasOne("DomainLayer.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("Country_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DomainLayer.Customer", b =>
                {
                    b.HasOne("DomainLayer.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Address_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Store", "Store")
                        .WithMany("Customers")
                        .HasForeignKey("Store_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DomainLayer.Film", b =>
                {
                    b.HasOne("DomainLayer.Language", "Language")
                        .WithMany("Films")
                        .HasForeignKey("Language_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DomainLayer.Film_actor", b =>
                {
                    b.HasOne("DomainLayer.Actor", null)
                        .WithMany("Film_Actors")
                        .HasForeignKey("Actor_id1");

                    b.HasOne("DomainLayer.Film", null)
                        .WithMany("Film_Actors")
                        .HasForeignKey("Film_id1");
                });

            modelBuilder.Entity("DomainLayer.Film_category", b =>
                {
                    b.HasOne("DomainLayer.Category", "Category")
                        .WithMany("Film_Categories")
                        .HasForeignKey("Category_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Film", "Film")
                        .WithMany("Film_categories")
                        .HasForeignKey("Film_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("DomainLayer.Inventory", b =>
                {
                    b.HasOne("DomainLayer.Film", "Film")
                        .WithMany("Inventories")
                        .HasForeignKey("Film_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Store", "Store")
                        .WithMany("Inventories")
                        .HasForeignKey("Store_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DomainLayer.Payment", b =>
                {
                    b.HasOne("DomainLayer.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("Customer_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Rental", "Rental")
                        .WithMany("Payments")
                        .HasForeignKey("Rental_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Staff", "Staff")
                        .WithMany("Payments")
                        .HasForeignKey("Staff_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Rental");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DomainLayer.Rental", b =>
                {
                    b.HasOne("DomainLayer.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("Customer_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Inventory", "Inventory")
                        .WithMany("Rentals")
                        .HasForeignKey("Inventory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Staff", "Staff")
                        .WithMany("Rentals")
                        .HasForeignKey("Staff_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Inventory");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DomainLayer.Staff", b =>
                {
                    b.HasOne("DomainLayer.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Address_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Store", "StoreManaged")
                        .WithMany("Staffs")
                        .HasForeignKey("StoreManagedStore_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("StoreManaged");
                });

            modelBuilder.Entity("DomainLayer.Actor", b =>
                {
                    b.Navigation("Film_Actors");
                });

            modelBuilder.Entity("DomainLayer.Category", b =>
                {
                    b.Navigation("Film_Categories");
                });

            modelBuilder.Entity("DomainLayer.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DomainLayer.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DomainLayer.Customer", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("DomainLayer.Film", b =>
                {
                    b.Navigation("Film_Actors");

                    b.Navigation("Film_categories");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("DomainLayer.Inventory", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("DomainLayer.Language", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("DomainLayer.Rental", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DomainLayer.Staff", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("DomainLayer.Store", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Inventories");

                    b.Navigation("Staffs");
                });
#pragma warning restore 612, 618
        }
    }
}
